name: Rust semver-checks ðŸ¦€
description: Action running Rust semver-checks

inputs:
  baseline-rev:
    description: "The base rev to compare against. Defaults to the PR's base branch."
    required: false
  token:
    description: "A Github PAT to post comments."
    required: true

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.merge_commit_sha || github.event.merge_group.head.sha }}
        path: PR_BRANCH
    - name: Checkout baseline
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.baseline-rev || github.event.pull_request.base.sha || github.event.merge_group.base.sha }}
        path: BASELINE_BRANCH
    - uses: mozilla-actions/sccache-action@v0.0.9
    - name: Install stable toolchain
      uses: dtolnay/rust-toolchain@stable

    # Install a prebuilt binary of cargo-semver-checks
    - uses: cargo-bins/cargo-binstall@main
    - name: Install cargo-semver-checks
      shell: bash
      run: cargo binstall -y cargo-semver-checks

    # Abort if the crate has build errors.
    - name: Check for build errors
      id: build
      shell: bash
      run: |
        cd PR_BRANCH
        cargo check --all-targets

    # Run cargo-semver-checks against the PR's target branch.
    - name: Check for public API changes
      id: check-changes
      shell: bash
      run: |
        # Don't fail the workflow when semver-checks returns a non-zero exit code.
        set +e

        cd PR_BRANCH
        cargo semver-checks --color never --baseline-root ../BASELINE_BRANCH --release-type minor > diagnostic.txt 2>&1
        exit_code=$?

        if grep -qE "not found in \.\./BASELINE_BRANCH" diagnostic.txt; then
          echo "new_package=true" >> $GITHUB_OUTPUT
          echo "breaking=false" >> $GITHUB_OUTPUT
        else
          echo "new_package=false" >> $GITHUB_OUTPUT
          if [ "$exit_code" -ne 0 ]; then
            echo "breaking=true" >> $GITHUB_OUTPUT
          else
            echo "breaking=false" >> $GITHUB_OUTPUT
          fi
        fi

        {
          echo 'semver_checks_diagnostic<<EOF'
          cat diagnostic.txt
          echo
          echo EOF
        } >> $GITHUB_OUTPUT

        echo "semver-checks diagnostic:\n"
        cat diagnostic.txt

    # Check if the PR title contains a breaking change flag,
    # to change the feedback message.
    - name: Check for breaking change flag
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      id: breaking-pr
      shell: bash
      run: |
        if echo "${PR_TITLE}" | grep -qE '^[^:(]*(\(.*\))?\!:.*$'; then
          echo "breaking=true" >> $GITHUB_OUTPUT
        else
          echo "breaking=false" >> $GITHUB_OUTPUT
        fi
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}

    # Debug step
    - shell: bash
      run: |
        echo "breaking: ${{ steps.check-changes.outputs.breaking }}"
        echo "breaking-pr: ${{ steps.breaking-pr.outputs.breaking }}"
        echo "new_package: ${{ steps.check-changes.outputs.new_package }}"

    # Post a message if a new package is detected (not present in baseline)
    - name: New package detected; skipping semver checks
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.new_package == 'true' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: rs-semver-checks
        message: |
          A new Rust package was added to the workspace and is not present in the baseline.
          Skipping semver checks.

          <details>
            <summary>cargo-semver-checks output</summary>
            
            ```
            ${{ steps.check-changes.outputs.semver_checks_diagnostic }}
            ```
            
          </details>
        GITHUB_TOKEN: ${{ inputs.token }}

    # Post a diagnostics comment if there are breaking changes and the PR has been marked as breaking.
    - name: Post a comment about the breaking changes. PR marked as breaking.
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'true' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: rs-semver-checks
        message: |
          This PR contains breaking changes to the public Rust API.

          <details>
            <summary>cargo-semver-checks summary</summary>
            
            ```
            ${{ steps.check-changes.outputs.semver_checks_diagnostic }}
            ```
            
          </details>
        GITHUB_TOKEN: ${{ inputs.token }}

    # Post a help comment if there are breaking changes, and the PR hasn't been marked as breaking.
    - name: Post a comment about the breaking changes. PR *not* marked as breaking.
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'false' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: rs-semver-checks
        message: |
          This PR contains breaking changes to the public Rust API.
          Please deprecate the old API instead (if possible), or mark the PR with a `!` to indicate a breaking change.

          <details>
            <summary>cargo-semver-checks summary</summary>
            
            ```
            ${{ steps.check-changes.outputs.semver_checks_diagnostic }}
            ```
            
          </details>
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Remove the checked out directories
      shell: bash
      run: |
        rm -rf PR_BRANCH BASELINE_BRANCH

    - name: Fail if there are undeclared breaking changes
      if: ${{ steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'false' && steps.check-changes.outputs.new_package != 'true' }}
      shell: bash
      run: exit 1

    # Delete previous comments when the issues have been resolved
    # This step doesn't run if any of the previous checks fails.
    - name: Delete previous comments
      uses: marocchino/sticky-pull-request-comment@v2
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'false' && steps.check-changes.outputs.new_package == 'false' }}
      with:
        header: rs-semver-checks
        delete: true
        GITHUB_TOKEN: ${{ inputs.token }}
