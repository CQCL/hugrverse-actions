name: Python semver-checks 🐍
description: Action running Python semver-checks

inputs:
  baseline-rev:
    description: "The base rev to compare against. Defaults to the PR's base branch."
    required: false
  token:
    description: "A Github PAT to post comments."
    required: true

runs:
  using: composite
  steps:
    - name: Checkout PR's head
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.merge_commit_sha || github.event.merge_group.head.sha }}
        # This will fetch the baseline commit, defined as the first parent of the merge commit.
        fetch-depth: 2

    - name: Define baseline commit
      id: define-baseline
      shell: bash
      run: |
        # Use the baseline input if present, otherwise use the merge commit's first parent.
        PR_HEAD_SHA=$(git rev-parse "HEAD")
        if [ -z "$BASELINE_INPUT" ]; then
          # Compute the actual sha of the baseline commit.
          BASELINE_REV=$(git rev-parse "HEAD^1")
        else
          # Ensure the baseline commit has been fetched.
          git fetch origin "$BASELINE_INPUT" --depth 1
          BASELINE_REV="$BASELINE_INPUT"
        fi
        echo "BASELINE_REV=$BASELINE_REV" >> $GITHUB_OUTPUT
      env:
        BASELINE_INPUT: ${{ inputs.baseline-rev }}

    - name: Set up uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true

    - name: Check for public API changes
      id: check-changes
      shell: bash
      run: |
        # Don't fail the workflow when the script returns a non-zero exit code.
        set +e

        echo "Running semver-checks on packages: $PACKAGES"
        echo "- Baseline commit: $BASELINE_REV"
        echo "- Head commit: $HEAD_REV"

        uv run "$ACTION_PATH/action.py" --baseline "$BASELINE_REV" --packages $PACKAGES > diagnostic.txt
        if [ "$?" -ne 0 ]; then
          echo "breaking=true" >> $GITHUB_OUTPUT
        else
          echo "breaking=false" >> $GITHUB_OUTPUT
        fi

        {
          echo 'semver_checks_diagnostic<<EOF'
          cat diagnostic.txt  | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g'
          echo
          echo EOF
        } >> $GITHUB_OUTPUT

        echo "semver-checks diagnostic:"
        echo
        cat diagnostic.txt
      env:
        ACTION_PATH: ${{ github.action_path }}
        BASELINE_REV: ${{ steps.define-baseline.outputs.BASELINE_REV }}
        HEAD_REV: ${{ github.event.pull_request.head.merge_commit_sha || github.event.merge_group.head.sha }}
        PACKAGES: ${{ inputs.packages }}

    # Check if the PR title contains a breaking change flag,
    # to change the feedback message.
    - name: Check for breaking change flag
      if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' }}
      id: breaking-pr
      shell: bash
      run: |
        if echo "${PR_TITLE}" | grep -qE '^[^:(]*(\(.*\))?\!:.*$'; then
          echo "breaking=true" >> $GITHUB_OUTPUT
        else
          echo "breaking=false" >> $GITHUB_OUTPUT
        fi
      env:
        PR_TITLE: ${{ github.event.pull_request.title }}

    # Debug step
    - shell: bash
      run: |
        echo "breaking: ${{ steps.check-changes.outputs.breaking }}"
        echo "breaking-pr: ${{ steps.breaking-pr.outputs.breaking }}"

    # Post a diagnostics comment if there are breaking changes and the PR has been marked as breaking.
    - name: Post a comment about the breaking changes. PR marked as breaking.
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'true' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: py-semver-checks
        message: |
          This PR contains breaking changes to the public Python API.

          <details>
            <summary>Breaking changes summary</summary>
            
            ```
            ${{ steps.check-changes.outputs.semver_checks_diagnostic }}
            ```
            
          </details>
        GITHUB_TOKEN: ${{ inputs.token }}

    # Post a help comment if there are breaking changes, and the PR hasn't been marked as breaking.
    - name: Post a comment about the breaking changes. PR *not* marked as breaking.
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'false' }}
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: py-semver-checks
        message: |
          This PR contains breaking changes to the public Python API.
          Please deprecate the old API instead (if possible), or mark the PR with a `!` to indicate a breaking change.

          <details>
            <summary>Breaking changes summary</summary>
            
            ```
            ${{ steps.check-changes.outputs.semver_checks_diagnostic }}
            ```
            
          </details>
        GITHUB_TOKEN: ${{ inputs.token }}

    - name: Fail if there are undeclared breaking changes
      if: ${{ steps.check-changes.outputs.breaking == 'true' && steps.breaking-pr.outputs.breaking == 'false' }}
      shell: bash
      run: exit 1

    # Delete previous comments when the issues have been resolved
    # This step doesn't run if any of the previous checks fails.
    - name: Delete previous comments
      uses: marocchino/sticky-pull-request-comment@v2
      if: ${{ (github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && steps.check-changes.outputs.breaking == 'false' }}
      with:
        header: py-semver-checks
        delete: true
        GITHUB_TOKEN: ${{ inputs.token }}
